"use strict";var e=require("@prisma/generator-helper"),t=require("ts-morph"),a=require("typescript"),r=require("zod"),n=require("path"),i=require("parenthesis");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(n);const l=r.z.enum(["true","false"]).transform((e=>JSON.parse(e))),c=r.z.object({relationModel:l.default("true").or(r.z.literal("default")),modelSuffix:r.z.string().default("Model"),modelCase:r.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:l.default("false"),imports:r.z.string().optional(),prismaJsonNullability:l.default("true"),languages:r.z.preprocess((e=>"string"==typeof e?e.split(","):["en"]),r.z.array(r.z.string())).default(["en"])}),d=(e,t,a=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(a))),m=({modelCase:e,modelSuffix:t,relationModel:a})=>{const r=(a,r="")=>("camelCase"===e&&(a=a.slice(0,1).toLowerCase()+a.slice(1)),`${r}${a}${t}`);return{modelName:e=>r(e,"default"===a?"_":""),relatedModelName:e=>r("default"===a?e.toString():`Related${e.toString()}`)}},u=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},p=e=>{const t=[];if(e){const a=e.split("\n").filter((e=>!e.trimStart().startsWith("@zod")));a.length&&(t.push("/**"),a.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},f=e=>e.split("\n").filter((e=>e.trimStart().startsWith("@zod"))).map((e=>e.trimStart().slice(4))).flatMap((e=>{return(t=i.parse(e),t.reduce(((e,t,a)=>a%2==0?[...e,[t]]:[...e.slice(0,-1),[...e.slice(-1)[0],t]]),[])).slice(0,-1).map((([e,t])=>e.replace(/\)?\./,"")+`${i.stringify(t)})`));var t}));let h=!1;const z=(e,t,a,r=(e=>e.toString()))=>{let n="z.unknown()",i=[""];if("scalar"===e.kind)switch(e.type){case"String":n="z.string()";break;case"Int":n="z.number()",i.push("int()");break;case"BigInt":n="z.bigint()";break;case"DateTime":n="z.date()";break;case"Float":case"Decimal":n="z.number()";break;case"Json":n=e.name.endsWith("Tr")?`z.object({${a.languages.map((e=>`${e}: z.string()`)).join(", ")}})`:"jsonSchema";break;case"Boolean":n="z.boolean()";break;case"Bytes":n="z.unknown()"}else"enum"===e.kind?n=`z.enum([${t[e.type].values.map((e=>`'${e}'`)).join(", ")}])`:"object"===e.kind&&(n=r(e.type));var o,s,l;return e.isList&&i.push("array()"),e.documentation&&(n=null!=(o=null==(s=f(e.documentation).find((e=>e.startsWith("custom("))))?void 0:s.slice(7).slice(0,-1))?o:n,i.push(...(l=e.documentation,f(l).filter((e=>!e.startsWith("custom(")))))),e.isRequired||"Json"===e.type||i.push("nullish()"),`${n}${i.join(".")}`};e.generatorHandler({onManifest:()=>({version:"0.5.6",prettyName:"Zod Schemas",defaultOutput:"zod"}),onGenerate(e){var r,n;const i=new t.Project,o=e.dmmf.datamodel.models,l=null!=(r=null==(n=e.dmmf.schema.enumTypes.model)?void 0:n.reduce(((e,t)=>({...e,[t.name]:t})),{}))?r:{},{schemaPath:f}=e,S=e.generator.output.value,y=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,b=c.safeParse(e.generator.config);if(!b.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const g=b.data,v={clientPath:y,outputPath:S,schemaPath:f},w=i.createSourceFile(`${S}/index.ts`,{},{overwrite:!0});return((e,t)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name.toLowerCase()}`})))})(o,w),w.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:a.SemicolonPreference.Remove}),o.forEach((e=>{const r=i.createSourceFile(`${S}/${e.name.toLowerCase()}.ts`,{},{overwrite:!0});((e,a,r,n,i)=>{((e,a,r,{schemaPath:n,outputPath:i})=>{const{relatedModelName:o}=m(r),l=[{kind:t.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}];r.imports&&l.push({kind:t.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:u(s.default.relative(i,s.default.resolve(s.default.dirname(n),r.imports)))}),r.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&l.push({kind:t.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"}),e.fields.some((e=>"Json"===e.type&&!e.name.endsWith("Tr")))&&(l.push({kind:t.StructureKind.ImportDeclaration,namedImports:["jsonSchema"],moduleSpecifier:"./utils/json"}),h=!0);const c=e.fields.filter((e=>"object"===e.kind));if(!1!==r.relationModel&&c.length>0){const a=c.filter((t=>t.type!==e.name));a.length>0&&l.push({kind:t.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(a.flatMap((e=>[`Complete${e.type}`,o(e.type)]))))})}a.addImportDeclarations(l)})(e,r,n,i),((e,t,a,r)=>{a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,r,n),((e,a,r,n,i)=>{const{modelName:o}=m(n);r.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:o(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${z(e,a,n)}`).write(",").newLine()}))})).write(")")}}]})})(e,a,r,n),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,n)&&((e,a,r,n,i)=>{const{modelName:o,relatedModelName:s}=m(n),l=e.fields.filter((e=>"object"===e.kind));r.addInterface({name:`Complete${e.name}`,isExported:!0,extends:[`z.infer<typeof ${o(e.name)}>`],properties:l.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),r.addStatements((t=>d(t,["","/**",` * ${s(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"]))),r.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:s(e.name),type:`z.ZodSchema<Complete${e.name}>`,initializer(t){t.write(`z.lazy(() => ${o(e.name)}.extend(`).inlineBlock((()=>{l.forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${z(e,a,n,s)}`).write(",").newLine()}))})).write("))")}}]})})(e,a,r,n)})(e,l,r,g,v),r.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:a.SemicolonPreference.Remove})})),function(e,a,r){if(!h)return;const n=e.createSourceFile(`${a}/utils/json.ts`,{},{overwrite:!0});n.addImportDeclarations([{kind:t.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}]),n.addStatements((e=>{e.newLine(),d(e,["// Helper schema for JSON fields","export type JsonObject = { [Key in string]?: JsonValue }","export type JsonArray = Array<JsonValue>","export type JsonValue = string | number | boolean | JsonObject | JsonArray | null","export const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()])","export const jsonSchema: z.ZodSchema<JsonValue> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))"])})),r.addExportDeclaration({moduleSpecifier:"./utils/json"})}(i,S,w),i.save()}});
//# sourceMappingURL=zod-prisma.cjs.production.min.js.map
