{"version":3,"file":"zod-prisma.cjs.production.min.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/jsonHelper.ts","../src/types.ts","../src/index.ts","../src/generator.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n\tlanguages: z\n\t\t.preprocess((v) => (typeof v === 'string' ? v.split(',') : ['en']), z.array(z.string()))\n\t\t.default(['en']),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import { Project, SourceFile, StructureKind } from 'ts-morph'\nimport { writeArray } from './util'\n\nlet needJsonHelper = false\nexport const setNeedJsonHelper = (value: boolean) => (needJsonHelper = value)\n\nexport function createJsonHelperFile(project: Project, outputPath: string, indexFile: SourceFile) {\n\tif (!needJsonHelper) {\n\t\treturn\n\t}\n\n\tconst sourceFile = project.createSourceFile(\n\t\t`${outputPath}/utils/json.ts`,\n\t\t{},\n\t\t{ overwrite: true }\n\t)\n\n\tsourceFile.addImportDeclarations([\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t])\n\n\tsourceFile.addStatements((writer) => {\n\t\twriter.newLine()\n\t\twriteArray(writer, [\n\t\t\t'// Helper schema for JSON fields',\n\t\t\t`export type JsonObject = { [Key in string]?: JsonValue }`,\n\t\t\t'export type JsonArray = Array<JsonValue>',\n\t\t\t'export type JsonValue = string | number | boolean | JsonObject | JsonArray | null',\n\t\t\t`export const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()])`,\n\t\t\t'export const jsonSchema: z.ZodSchema<JsonValue> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t])\n\t})\n\n\tindexFile.addExportDeclaration({\n\t\tmoduleSpecifier: `./utils/json`,\n\t})\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { Config } from './config'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tenums: EnumModel,\n\tconfig: Config,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tif (field.name.endsWith('Tr')) {\n\t\t\t\t\tzodType = `z.object({${config.languages\n\t\t\t\t\t\t.map((lang) => `${lang}: z.string()`)\n\t\t\t\t\t\t.join(', ')}})`\n\t\t\t\t} else {\n\t\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.enum([${enums[field.type].values.map((value) => `'${value}'`).join(', ')}])`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n\nexport interface EnumModel {\n\t[key: string]: DMMF.SchemaEnum\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { Project } from 'ts-morph'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { generateBarrelFile, populateModelFile } from './generator'\nimport { createJsonHelperFile } from './jsonHelper'\nimport { EnumModel } from './types'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\t\tconst enums: EnumModel =\n\t\t\toptions.dmmf.schema.enumTypes.model?.reduce((prev, enumModel) => {\n\t\t\t\treturn { ...prev, [enumModel.name]: enumModel }\n\t\t\t}, {}) ?? {}\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, enums, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\tcreateJsonHelperFile(project, outputPath, indexFile)\n\n\t\treturn project.save()\n\t},\n})\n","import { DMMF } from '@prisma/generator-helper'\nimport path from 'path'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { getJSDocs } from './docs'\nimport { setNeedJsonHelper } from './jsonHelper'\nimport { EnumModel, getZodConstructor } from './types'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tif (model.fields.some((f) => f.type === 'Json' && !f.name.endsWith('Tr'))) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['jsonSchema'],\n\t\t\tmoduleSpecifier: './utils/json',\n\t\t})\n\n\t\tsetNeedJsonHelper(true)\n\t}\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\t\tenums,\n\t\t\t\t\t\t\t\t\t\t\t\tconfig\n\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\tenums,\n\t\t\t\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, enums, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, enums, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","languages","preprocess","v","split","array","writeArray","writer","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","dotSlash","input","converted","replace","includes","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","chunk","reduce","arr","item","idx","each","contents","stringify","needJsonHelper","getZodConstructor","field","enums","config","getRelatedModelName","zodType","extraModifiers","kind","type","endsWith","lang","join","values","value","isList","documentation","find","modifier","_getZodDocElements$fi","isRequired","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","models","dmmf","datamodel","schema","enumTypes","model","_options$dmmf$schema$2","prev","enumModel","schemaPath","outputPath","generator","output","clientPath","otherGenerators","provider","results","safeParse","success","Error","data","prismaOptions","indexFile","createSourceFile","overwrite","addExportDeclaration","moduleSpecifier","generateBarrelFile","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","sourceFile","importList","StructureKind","ImportDeclaration","namespaceImport","path","relative","resolve","dirname","fields","some","f","namedImports","relationFields","filteredFields","Array","from","Set","addImportDeclarations","writeImportsForModel","_prismaOptions","addStatements","writeTypeSpecificSchemas","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateSchemaForModel","needsRelatedModel","addInterface","extends","properties","hasQuestionToken","generateRelatedSchemaForModel","populateModelFile","createJsonHelperFile","save"],"mappings":"oPAEA,MAAMA,EAAgBC,IAAEC,KAAK,CAAC,OAAQ,UAAUC,WAAWC,GAAQC,KAAKC,MAAMF,KAEjEG,EAAeN,IAAEO,OAAO,CACpCC,cAAeT,EAAcU,QAAQ,QAAQC,GAAGV,IAAEW,QAAQ,YAC1DC,YAAaZ,IAAEa,SAASJ,QAAQ,SAChCK,UAAWd,IAAEC,KAAK,CAAC,aAAc,cAAcQ,QAAQ,cACvDM,aAAchB,EAAcU,QAAQ,SACpCO,QAAShB,IAAEa,SAASI,WACpBC,sBAAuBnB,EAAcU,QAAQ,QAC7CU,UAAWnB,IACToB,YAAYC,GAAoB,iBAANA,EAAiBA,EAAEC,MAAM,KAAO,CAAC,OAAQtB,IAAEuB,MAAMvB,IAAEa,WAC7EJ,QAAQ,CAAC,SCTCe,EAAa,CAACC,EAAyBF,EAAiBG,GAAU,IAC9EH,EAAMI,SAASC,GAASH,EAAOI,MAAMD,GAAME,mBAAmBJ,KAElDK,EAAgB,EAAGjB,YAAWF,cAAaJ,0BACjDwB,EAAkB,CAACC,EAAcC,EAAS,MAC7B,cAAdpB,IACHmB,EAAOA,EAAKE,MAAM,EAAG,GAAGC,cAAgBH,EAAKE,MAAM,OAE1CD,IAASD,IAAOrB,WAGpB,CACNyB,UAAYJ,GAAiBD,EAAgBC,EAAwB,YAAlBzB,EAA8B,IAAM,IACvF8B,iBAAmBL,GAClBD,EACmB,YAAlBxB,EAA8ByB,EAAKM,qBAAuBN,EAAKM,cAJlE,EAoBYC,EAAYC,UAClBC,EAAYD,EAChBE,QAAQ,YAAa,IACrBA,QAAQ,MAAO,KACfA,QAAQ,SAAU,YAEhBD,EAAUE,2BAAmCF,EAAUpB,wBAAwBa,OAAO,GAAG,GAEzFO,EAAUG,kBAA0BH,EAEjC,KAAOA,CAAd,EC1CYI,EAAaC,UACnBC,EAAkB,MAEpBD,EAAW,OACRE,EAAWF,EAAUzB,MAAM,MAAM4B,QAAQC,IAAQA,EAAGC,YAAYP,WAAW,UAE7EI,EAASI,SACZL,EAAMM,KAAK,OACXL,EAAStB,SAASwB,GAAOH,EAAMM,WAAWH,OAC1CH,EAAMM,KAAK,eAINN,CAAP,EAGYO,EAAqBR,GACjCA,EACEzB,MAAM,MACN4B,QAAQtB,GAASA,EAAKwB,YAAYP,WAAW,UAC7CW,KAAK5B,GAASA,EAAKwB,YAAYjB,MAAM,KACrCsB,SAAS7B,IAET8B,ODCoCjB,ECD9BpC,QAAMuB,GDEPa,EAAMkB,QAAO,CAACC,EAAKC,EAAMC,IACxBA,ECHa,GDGE,EACnB,IAAIF,EAAK,CAACC,IACV,IAAID,EAAIzB,MAAM,GAAI,GAAI,IAAIyB,EAAIzB,OAAO,GAAG,GAAI0B,KAC7C,KCLC1B,MAAM,GAAI,GACVqB,KACA,EAAEO,EAAMC,KACND,EAAgBpB,QAAQ,QAAS,OAC/BsB,YAAUD,QDJE,IAAkBvB,CCPtC,ICjBD,IAAIyB,GAAiB,ECCd,MAAMC,EAAoB,CAChCC,EACAC,EACAC,EACAC,EAAuBtC,IACtBA,EAAKM,mBAEFiC,EAAU,cACVC,EAA2B,CAAC,OACb,WAAfL,EAAMM,YACDN,EAAMO,UACR,SACJH,EAAU,uBAEN,MACJA,EAAU,aACVC,EAAenB,KAAK,mBAEhB,SACJkB,EAAU,uBAEN,WACJA,EAAU,qBAEN,YAGA,UACJA,EAAU,uBAEN,OAEHA,EADGJ,EAAMnC,KAAK2C,SAAS,mBACAN,EAAOnD,UAC5BqC,KAAKqB,MAAYA,kBACjBC,KAAK,UAEG,uBAGP,UACJN,EAAU,wBAGN,QACJA,EAAU,kBAGa,SAAfJ,EAAMM,KAChBF,aAAqBH,EAAMD,EAAMO,MAAMI,OAAOvB,KAAKwB,OAAcA,OAAUF,KAAK,UACvD,WAAfV,EAAMM,OAChBF,EAAUD,EAAoBH,EAAMO,eFZL5B,SEe5BqB,EAAMa,QAAQR,EAAenB,KAAK,WAClCc,EAAMc,gBACTV,oBFvBMjB,EEuBwBa,EAAMc,eFtBnCC,MAAMC,GAAaA,EAASvC,WAAW,qBADlCwC,EAEJlD,MAAM,GACPA,MAAM,GAAI,MEoB2CqC,EACtDC,EAAenB,SFlBgBP,EEkBSqB,EAAMc,cFjBxC3B,EAAkBR,GAAWG,QAAQa,IAAUA,EAAKlB,WAAW,gBEmBjEuB,EAAMkB,YAA6B,SAAflB,EAAMO,MAAiBF,EAAenB,KAAK,gBAG1DkB,IAAUC,EAAeK,KAAK,MAAxC,ECtDDS,mBAAiB,CAChBC,WAAU,KACF,CACNC,gBACAC,WAAY,cACZC,cAAe,QAGjBC,WAAWC,iBACJC,EAAU,IAAIC,UAEdC,EAASH,EAAQI,KAAKC,UAAUF,OAChC3B,oBACLwB,EAAQI,KAAKE,OAAOC,UAAUC,cAA9BC,EAAqC3C,QAAO,CAAC4C,EAAMC,KAC3C,IAAKD,GAAOC,EAAUvE,MAAOuE,KAClC,OAAO,IAELC,WAAEA,GAAeZ,EACjBa,EAAab,EAAQc,UAAUC,OAAQ5B,MACvC6B,EAAahB,EAAQiB,gBAAgB3B,MACzCpB,GAAiC,qBAAxBA,EAAKgD,SAAS/B,QACtB4B,OAAQ5B,MAELgC,EAAU1G,EAAa2G,UAAUpB,EAAQc,UAAUrC,YACpD0C,EAAQE,QACZ,MAAM,IAAIC,MACT,wFAGI7C,EAAS0C,EAAQI,KACjBC,EAA+B,CACpCR,aACAH,aACAD,cAGKa,EAAYxB,EAAQyB,oBACtBb,aACH,GACA,CAAEc,WAAW,UCyLkB,EAACxB,EAAsBsB,KACxDtB,EAAOrE,SAAS0E,GACfiB,EAAUG,qBAAqB,CAC9BC,qBAAsBrB,EAAMpE,KAAKG,qBDzLlCuF,CAAmB3B,EAAQsB,GAE3BA,EAAUM,WAAW,CACpBC,WAAY,EACZC,qBAAqB,EACrBC,WAAYC,sBAAoBC,SAGjCjC,EAAOrE,SAAS0E,UACT6B,EAAapC,EAAQyB,oBACvBb,KAAcL,EAAMpE,KAAKG,mBAC5B,GACA,CAAEoF,WAAW,IC4JgB,EAChCnB,EACAhC,EACA6D,EACA5D,EACA+C,KApNmC,EACnChB,EACA6B,EACA5D,GACEmC,aAAYC,uBAERpE,iBAAEA,GAAqBP,EAAcuC,GACrC6D,EAA2C,CAChD,CACCzD,KAAM0D,gBAAcC,kBACpBC,gBAAiB,IACjBZ,gBAAiB,QAIfpD,EAAOtD,SACVmH,EAAW7E,KAAK,CACfoB,KAAM0D,gBAAcC,kBACpBC,gBAAiB,UACjBZ,gBAAiBlF,EAChB+F,UAAKC,SAAS9B,EAAY6B,UAAKE,QAAQF,UAAKG,QAAQjC,GAAanC,EAAOtD,aAKvEsD,EAAOvD,cAAgBsF,EAAMsC,OAAOC,MAAMC,GAAiB,YAAXA,EAAElE,QACrDwD,EAAW7E,KAAK,CACfoB,KAAM0D,gBAAcC,kBACpBS,aAAc,CAAC,WACfpB,gBAAiB,eAIfrB,EAAMsC,OAAOC,MAAMC,GAAiB,SAAXA,EAAElE,OAAoBkE,EAAE5G,KAAK2C,SAAS,UAClEuD,EAAW7E,KAAK,CACfoB,KAAM0D,gBAAcC,kBACpBS,aAAc,CAAC,cACfpB,gBAAiB,iBH/CkCxD,GGkDlC,SAGb6E,EAAiB1C,EAAMsC,OAAOzF,QAAQ2F,GAAiB,WAAXA,EAAEnE,WAEvB,IAAzBJ,EAAO9D,eAA2BuI,EAAe1F,OAAS,EAAG,OAC1D2F,EAAiBD,EAAe7F,QAAQ2F,GAAMA,EAAElE,OAAS0B,EAAMpE,OAEjE+G,EAAe3F,OAAS,GAC3B8E,EAAW7E,KAAK,CACfoB,KAAM0D,gBAAcC,kBACpBX,gBAAiB,UACjBoB,aAAcG,MAAMC,KACnB,IAAIC,IACHH,EAAevF,SAASoF,GAAM,YAClBA,EAAElE,OACbrC,EAAiBuG,EAAElE,aAQzBuD,EAAWkB,sBAAsBjB,IAsJjCkB,CAAqBhD,EAAO6B,EAAY5D,EAAQ+C,GAnJT,EACvChB,EACA6B,EACA5D,EACAgF,KAEIhF,EAAOvD,cAAgBsF,EAAMsC,OAAOC,MAAMC,GAAiB,YAAXA,EAAElE,QACrDuD,EAAWqB,eAAe9H,IACzBA,EAAOC,UACPF,EAAWC,EAAQ,CAClB,sCACA,IACA,uBACA,kBACA,kBACA,uBACA,UACA,iCACA,sBACA,oBACA,MACA,KACA,8CAbD,KA2IF+H,CAAyBnD,EAAO6B,EAAY5D,GAxHP,EACrC+B,EACAhC,EACA6D,EACA5D,EACAgF,WAEMjH,UAAEA,GAAcN,EAAcuC,GAEpC4D,EAAWuB,qBAAqB,CAC/BC,gBAAiBC,0BAAwBC,MACzCC,YAAY,EACZC,cAAgBrI,GAAWA,EAAOsI,qBAClCC,aAAc,CACb,CACC/H,KAAMI,EAAUgE,EAAMpE,MACtBgI,YAAYxI,GACXA,EACEI,MAAM,aACNqI,aAAY,KACZ7D,EAAMsC,OACJzF,QAAQ2F,GAAiB,WAAXA,EAAEnE,OAChB/C,SAASyC,IACT5C,EAAWC,EAAQqB,EAAUsB,EAAMc,gBACnCzD,EACEI,SACGuC,EAAMnC,SAASkC,EACjBC,EACAC,EACAC,MAGDzC,MAAM,KACNH,gBAGJG,MAAM,WAqFZsI,CAAuB9D,EAAOhC,EAAO6D,EAAY5D,GL9MjB,EAAC+B,EAAmB/B,IACpD+B,EAAMsC,OAAOC,MAAMxE,GAAyB,WAAfA,EAAMM,SAA+C,IAAzBJ,EAAO9D,cK8M5D4J,CAAkB/D,EAAO/B,IA/Ee,EAC5C+B,EACAhC,EACA6D,EACA5D,EACAgF,WAEMjH,UAAEA,EAAFC,iBAAaA,GAAqBP,EAAcuC,GAEhDyE,EAAiB1C,EAAMsC,OAAOzF,QAAQ2F,GAAiB,WAAXA,EAAEnE,OAEpDwD,EAAWmC,aAAa,CACvBpI,gBAAiBoE,EAAMpE,OACvB4H,YAAY,EACZS,QAAS,mBAAmBjI,EAAUgE,EAAMpE,UAC5CsI,WAAYxB,EAAevF,KAAKqF,KAC/B2B,kBAAmB3B,EAAEvD,WACrBrD,KAAM4G,EAAE5G,KACR0C,gBAAiBkE,EAAElE,OAAOkE,EAAE5D,OAAS,KAAO,KAAM4D,EAAEvD,WAAyB,GAAZ,kBAInE4C,EAAWqB,eAAe9H,GACzBD,EAAWC,EAAQ,CAClB,GACA,YACMa,EACL+D,EAAMpE,wEAEP,KACA,kFACA,UAIFiG,EAAWuB,qBAAqB,CAC/BC,gBAAiBC,0BAAwBC,MACzCC,YAAY,EACZG,aAAc,CACb,CACC/H,KAAMK,EAAiB+D,EAAMpE,MAC7B0C,4BAA6B0B,EAAMpE,QACnCgI,YAAYxI,GACXA,EACEI,sBAAsBQ,EAAUgE,EAAMpE,iBACtCiI,aAAY,KACZnB,EAAepH,SAASyC,IACvB5C,EAAWC,EAAQqB,EAAUsB,EAAMc,gBAEnCzD,EACEI,SACGuC,EAAMnC,SAASkC,EACjBC,EACAC,EACAC,EACAhC,MAGDT,MAAM,KACNH,gBAGHG,MAAM,YAkBX4I,CAA8BpE,EAAOhC,EAAO6D,EAAY5D,EAAxD,EDpKCoG,CAAkBrE,EAAOhC,EAAO6D,EAAY5D,EAAQ+C,GAEpDa,EAAWN,WAAW,CACrBC,WAAY,EACZC,qBAAqB,EACrBC,WAAYC,sBAAoBC,qBFnECnC,EAAkBY,EAAoBY,OACrEpD,eAICgE,EAAapC,EAAQyB,oBACvBb,kBACH,GACA,CAAEc,WAAW,IAGdU,EAAWkB,sBAAsB,CAChC,CACC1E,KAAM0D,gBAAcC,kBACpBC,gBAAiB,IACjBZ,gBAAiB,SAInBQ,EAAWqB,eAAe9H,IACzBA,EAAOC,UACPF,EAAWC,EAAQ,CAClB,8FAEA,2CACA,4KAEA,uIAND,IAUD6F,EAAUG,qBAAqB,CAC9BC,gCAED,CEqCCiD,CAAqB7E,EAASY,EAAYY,GAEnCxB,EAAQ8E"}