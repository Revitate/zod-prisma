{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tenums: EnumModel,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.enum([${enums[field.type].values.map((value) => `'${value}'`).join(', ')}])`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n\nexport interface EnumModel {\n\t[key: string]: DMMF.SchemaEnum\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport path from 'path'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { getJSDocs } from './docs'\nimport { EnumModel, getZodConstructor } from './types'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type JsonObject = { [Key in string]?: JsonValue }`,\n\t\t\t\t'type JsonArray = Array<JsonValue>',\n\t\t\t\t'type JsonValue = string | number | boolean | JsonObject | JsonArray | null',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<JsonValue> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field, enums)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\tenums,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, enums, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, enums, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { Project } from 'ts-morph'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { generateBarrelFile, populateModelFile } from './generator'\nimport { EnumModel } from './types'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\t\tconst enums: EnumModel =\n\t\t\toptions.dmmf.schema.enumTypes.model?.reduce((prev, enumModel) => {\n\t\t\t\treturn { ...prev, [enumModel.name]: enumModel }\n\t\t\t}, {}) ?? {}\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, enums, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","transform","arg","JSON","parse","configSchema","object","relationModel","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","enums","getRelatedModelName","zodType","extraModifiers","type","values","value","join","isList","documentation","isRequired","writeImportsForModel","sourceFile","schemaPath","outputPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","relationFields","filteredFields","Array","from","Set","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","schema","enumTypes","prev","enumModel","generator","output","clientPath","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,gBAAGC,KAAC,QAAD,CAAO,CAAC,MAAD,EAAS,OAAT,CAAP,EAA0BC,SAA1B,CAAoC,UAACC,GAAD;AAAA,SAASC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAT;AAAA,CAApC,CAAtB;AAEO,IAAMG,YAAY,gBAAGL,KAAC,CAACM,MAAF,CAAS;AACpCC,EAAAA,aAAa,eAAER,aAAa,WAAb,CAAsB,MAAtB,EAA8BS,EAA9B,eAAiCR,KAAC,CAACS,OAAF,CAAU,SAAV,CAAjC,CADqB;AAEpCC,EAAAA,WAAW,eAAEV,KAAC,CAACW,MAAF,cAAmB,OAAnB,CAFuB;AAGpCC,EAAAA,SAAS,eAAEZ,KAAC,QAAD,CAAO,CAAC,YAAD,EAAe,WAAf,CAAP,aAA4C,YAA5C,CAHyB;AAIpCa,EAAAA,YAAY,eAAEd,aAAa,WAAb,CAAsB,OAAtB,CAJsB;AAKpCe,EAAAA,OAAO,eAAEd,KAAC,CAACW,MAAF,GAAWI,QAAX,EAL2B;AAMpCC,EAAAA,qBAAqB,eAAEjB,aAAa,WAAb,CAAsB,MAAtB;AANa,CAAT,CAArB;;ACAA,IAAMkB,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAA0BC,KAA1B,EAA2CC,OAA3C;AAAA,MAA2CA,OAA3C;AAA2CA,IAAAA,OAA3C,GAAqD,IAArD;AAAA;;AAAA,SACzBD,KAAK,CAACE,OAAN,CAAc,UAACC,IAAD;AAAA,WAAUJ,MAAM,CAACK,KAAP,CAAaD,IAAb,EAAmBE,kBAAnB,CAAsCJ,OAAtC,CAAV;AAAA,GAAd,CADyB;AAAA,CAAnB;AAGA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB;MAAGb,iBAAAA;MAAWF,mBAAAA;MAAaH,qBAAAA;;AACvD,MAAMmB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAeC,MAAf;QAAeA;AAAAA,MAAAA,SAAS;;;AAC/C,QAAIhB,SAAS,KAAK,WAAlB,EAA+B;AAC9Be,MAAAA,IAAI,GAAGA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,WAAjB,KAAiCH,IAAI,CAACE,KAAL,CAAW,CAAX,CAAxC;AACA;;AACD,gBAAUD,MAAV,GAAmBD,IAAnB,GAA0BjB,WAA1B;AACA,GALD;;AAOA,SAAO;AACNqB,IAAAA,SAAS,EAAE,mBAACJ,IAAD;AAAA,aAAkBD,eAAe,CAACC,IAAD,EAAOpB,aAAa,KAAK,SAAlB,GAA8B,GAA9B,GAAoC,EAA3C,CAAjC;AAAA,KADL;AAENyB,IAAAA,gBAAgB,EAAE,0BAACL,IAAD;AAAA,aACjBD,eAAe,CACdnB,aAAa,KAAK,SAAlB,GAA8BoB,IAAI,CAACM,QAAL,EAA9B,eAA0DN,IAAI,CAACM,QAAL,EAD5C,CADE;AAAA;AAFZ,GAAP;AAOA,CAfM;AAiBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAoBC,MAApB;AAAA,SAChCD,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkB,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAN,KAAe,QAA1B;AAAA,GAAlB,KAAyDJ,MAAM,CAAC7B,aAAP,KAAyB,KADlD;AAAA,CAA1B;AAGA,IAAMkC,KAAK,GAAG,SAARA,KAAQ,CAAkBC,KAAlB,EAA4BC,IAA5B;AACpB,SAAOD,KAAK,CAACE,MAAN,CAAa,UAACC,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AACnB,WAAOA,GAAG,GAAGJ,IAAN,KAAe,CAAf,aACAE,GADA,GACK,CAACC,IAAD,CADL,eAEAD,GAAG,CAAChB,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAFA,aAEsBgB,GAAG,CAAChB,KAAJ,CAAU,CAAC,CAAX,EAAc,CAAd,CAFtB,GAEwCiB,IAFxC,IAAP;AAGA,GAJM,EAIJ,EAJI,CAAP;AAKA,CANM;AAQA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACN,KAAD;AACvB,MAAMO,SAAS,GAAGP,KAAK,CACrBQ,OADgB,CACR,WADQ,EACK,EADL,EAEhBA,OAFgB,CAER,KAFQ,EAED,GAFC,EAGhBA,OAHgB,CAGR,QAHQ,EAGE,GAHF,CAAlB;AAKA,MAAID,SAAS,CAACE,QAAV,kBAAJ,EAA0C,OAAOF,SAAS,CAACG,KAAV,mBAAkCvB,KAAlC,CAAwC,CAAC,CAAzC,EAA4C,CAA5C,CAAP;AAE1C,MAAIoB,SAAS,CAACI,UAAV,OAAJ,EAAiC,OAAOJ,SAAP;AAEjC,SAAO,OAAOA,SAAd;AACA,CAXM;;AChCA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD;AACxB,MAAMC,KAAK,GAAa,EAAxB;;AAEA,MAAID,SAAJ,EAAe;AACd,QAAME,QAAQ,GAAGF,SAAS,CAACH,KAAV,CAAgB,IAAhB,EAAsBM,MAAtB,CAA6B,UAACC,EAAD;AAAA,aAAQ,CAACA,EAAE,CAACC,SAAH,GAAeP,UAAf,CAA0B,MAA1B,CAAT;AAAA,KAA7B,CAAjB;;AAEA,QAAII,QAAQ,CAACI,MAAb,EAAqB;AACpBL,MAAAA,KAAK,CAACM,IAAN,CAAW,KAAX;AACAL,MAAAA,QAAQ,CAACpC,OAAT,CAAiB,UAACsC,EAAD;AAAA,eAAQH,KAAK,CAACM,IAAN,SAAiBH,EAAjB,CAAR;AAAA,OAAjB;AACAH,MAAAA,KAAK,CAACM,IAAN,CAAW,KAAX;AACA;AACD;;AAED,SAAON,KAAP;AACA,CAdM;AAgBA,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAACR,SAAD;AAAA,SAChCA,SAAS,CACPH,KADF,CACQ,IADR,EAEEM,MAFF,CAES,UAACpC,IAAD;AAAA,WAAUA,IAAI,CAACsC,SAAL,GAAiBP,UAAjB,CAA4B,MAA5B,CAAV;AAAA,GAFT,EAGEW,GAHF,CAGM,UAAC1C,IAAD;AAAA,WAAUA,IAAI,CAACsC,SAAL,GAAiB/B,KAAjB,CAAuB,CAAvB,CAAV;AAAA,GAHN,EAIEoC,OAJF,CAIU,UAAC3C,IAAD;AAAA;AAERmB,MAAAA,KAAK,CAACrC,iBAAK,CAACkB,IAAD,CAAN,EAAc,CAAd,CAAL,CACEO,KADF,CACQ,CADR,EACW,CAAC,CADZ,EAEEmC,GAFF,CAGE;AAAA,YAAEE,IAAF;AAAA,YAAQC,QAAR;AAAA,eACED,IAAe,CAAChB,OAAhB,CAAwB,OAAxB,EAAiC,EAAjC,KACEkB,qBAAS,CAACD,QAAD,CADX,OADF;AAAA,OAHF;AAFQ;AAAA,GAJV,CADgC;AAAA,CAA1B;AAgBA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACd,SAAD;;;AAClC,kCAAOQ,iBAAiB,CAACR,SAAD,CAAjB,CACLe,IADK,CACA,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAAClB,UAAT,CAAoB,SAApB,CAAd;AAAA,GADA,CAAP,qBAAO,sBAEJxB,KAFI,CAEE,CAFF,EAGLA,KAHK,CAGC,CAHD,EAGI,CAAC,CAHL,CAAP;AAIA,CALM;AAOA,IAAM2C,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACjB,SAAD;AAC/B,SAAOQ,iBAAiB,CAACR,SAAD,CAAjB,CAA6BG,MAA7B,CAAoC,UAACQ,IAAD;AAAA,WAAU,CAACA,IAAI,CAACb,UAAL,CAAgB,SAAhB,CAAX;AAAA,GAApC,CAAP;AACA,CAFM;;ACvCA,IAAMoB,iBAAiB,GAAG,SAApBA,iBAAoB,CAChClC,KADgC,EAEhCmC,KAFgC,EAGhCC,mBAHgC;MAGhCA;AAAAA,IAAAA,sBAAsB,6BAAChD,IAAD;AAAA,aACrBA,IAAI,CAACM,QAAL,EADqB;AAAA;;;AAGtB,MAAI2C,OAAO,GAAG,aAAd;AACA,MAAIC,cAAc,GAAa,CAAC,EAAD,CAA/B;;AACA,MAAItC,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AAC5B,YAAQD,KAAK,CAACuC,IAAd;AACC,WAAK,QAAL;AACCF,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,KAAL;AACCA,QAAAA,OAAO,GAAG,YAAV;AACAC,QAAAA,cAAc,CAACf,IAAf,CAAoB,OAApB;AACA;;AACD,WAAK,QAAL;AACCc,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,UAAL;AACCA,QAAAA,OAAO,GAAG,UAAV;AACA;;AACD,WAAK,OAAL;AACCA,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,SAAL;AACCA,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,MAAL;AACCA,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,SAAL;AACCA,QAAAA,OAAO,GAAG,aAAV;AACA;AACD;;AACA,WAAK,OAAL;AACCA,QAAAA,OAAO,GAAG,aAAV;AACA;AA7BF;AA+BA,GAhCD,MAgCO,IAAIrC,KAAK,CAACC,IAAN,KAAe,MAAnB,EAA2B;AACjCoC,IAAAA,OAAO,gBAAcF,KAAK,CAACnC,KAAK,CAACuC,IAAP,CAAL,CAAkBC,MAAlB,CAAyBf,GAAzB,CAA6B,UAACgB,KAAD;AAAA,mBAAeA,KAAf;AAAA,KAA7B,EAAsDC,IAAtD,CAA2D,IAA3D,CAAd,OAAP;AACA,GAFM,MAEA,IAAI1C,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AACnCoC,IAAAA,OAAO,GAAGD,mBAAmB,CAACpC,KAAK,CAACuC,IAAP,CAA7B;AACA;;AAED,MAAIvC,KAAK,CAAC2C,MAAV,EAAkBL,cAAc,CAACf,IAAf,CAAoB,SAApB;;AAClB,MAAIvB,KAAK,CAAC4C,aAAV,EAAyB;AAAA;;AACxBP,IAAAA,OAAO,2BAAGP,mBAAmB,CAAC9B,KAAK,CAAC4C,aAAP,CAAtB,mCAA+CP,OAAtD;AACAC,IAAAA,cAAc,CAACf,IAAf,OAAAe,cAAc,EAASL,gBAAgB,CAACjC,KAAK,CAAC4C,aAAP,CAAzB,CAAd;AACA;;AACD,MAAI,CAAC5C,KAAK,CAAC6C,UAAP,IAAqB7C,KAAK,CAACuC,IAAN,KAAe,MAAxC,EAAgDD,cAAc,CAACf,IAAf,CAAoB,WAApB;;AAGhD,cAAUc,OAAV,GAAoBC,cAAc,CAACI,IAAf,CAAoB,GAApB,CAApB;AACA,CAvDM;;ACUA,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CACnClD,KADmC,EAEnCmD,UAFmC,EAGnClD,MAHmC;MAIjCmD,kBAAAA;MAAYC,kBAAAA;;AAEd,uBAA6B/D,aAAa,CAACW,MAAD,CAA1C;AAAA,MAAQJ,gBAAR,kBAAQA,gBAAR;;AACA,MAAMyD,UAAU,GAAiC,CAChD;AACCjD,IAAAA,IAAI,EAAEkD,qBAAa,CAACC,iBADrB;AAECC,IAAAA,eAAe,EAAE,GAFlB;AAGCC,IAAAA,eAAe,EAAE;AAHlB,GADgD,CAAjD;;AAQA,MAAIzD,MAAM,CAACtB,OAAX,EAAoB;AACnB2E,IAAAA,UAAU,CAAC3B,IAAX,CAAgB;AACftB,MAAAA,IAAI,EAAEkD,qBAAa,CAACC,iBADL;AAEfC,MAAAA,eAAe,EAAE,SAFF;AAGfC,MAAAA,eAAe,EAAE7C,QAAQ,CACxB8C,wBAAI,CAACC,QAAL,CAAcP,UAAd,EAA0BM,wBAAI,CAACE,OAAL,CAAaF,wBAAI,CAACG,OAAL,CAAaV,UAAb,CAAb,EAAuCnD,MAAM,CAACtB,OAA9C,CAA1B,CADwB;AAHV,KAAhB;AAOA;;AAED,MAAIsB,MAAM,CAACvB,YAAP,IAAuBsB,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkB,UAAC4D,CAAD;AAAA,WAAOA,CAAC,CAACpB,IAAF,KAAW,SAAlB;AAAA,GAAlB,CAA3B,EAA2E;AAC1EW,IAAAA,UAAU,CAAC3B,IAAX,CAAgB;AACftB,MAAAA,IAAI,EAAEkD,qBAAa,CAACC,iBADL;AAEfQ,MAAAA,YAAY,EAAE,CAAC,SAAD,CAFC;AAGfN,MAAAA,eAAe,EAAE;AAHF,KAAhB;AAKA;;AACD,MAAMO,cAAc,GAAGjE,KAAK,CAACE,MAAN,CAAaqB,MAAb,CAAoB,UAACwC,CAAD;AAAA,WAAOA,CAAC,CAAC1D,IAAF,KAAW,QAAlB;AAAA,GAApB,CAAvB;;AAEA,MAAIJ,MAAM,CAAC7B,aAAP,KAAyB,KAAzB,IAAkC6F,cAAc,CAACvC,MAAf,GAAwB,CAA9D,EAAiE;AAChE,QAAMwC,cAAc,GAAGD,cAAc,CAAC1C,MAAf,CAAsB,UAACwC,CAAD;AAAA,aAAOA,CAAC,CAACpB,IAAF,KAAW3C,KAAK,CAACR,IAAxB;AAAA,KAAtB,CAAvB;;AAEA,QAAI0E,cAAc,CAACxC,MAAf,GAAwB,CAA5B,EAA+B;AAC9B4B,MAAAA,UAAU,CAAC3B,IAAX,CAAgB;AACftB,QAAAA,IAAI,EAAEkD,qBAAa,CAACC,iBADL;AAEfE,QAAAA,eAAe,EAAE,SAFF;AAGfM,QAAAA,YAAY,EAAEG,KAAK,CAACC,IAAN,CACb,IAAIC,GAAJ,CACCH,cAAc,CAACpC,OAAf,CAAuB,UAACiC,CAAD;AAAA,iBAAO,cAClBA,CAAC,CAACpB,IADgB,EAE7B9C,gBAAgB,CAACkE,CAAC,CAACpB,IAAH,CAFa,CAAP;AAAA,SAAvB,CADD,CADa;AAHC,OAAhB;AAYA;AACD;;AAEDQ,EAAAA,UAAU,CAACmB,qBAAX,CAAiChB,UAAjC;AACA,CAtDM;AAwDA,IAAMiB,wBAAwB,GAAG,SAA3BA,wBAA2B,CACvCvE,KADuC,EAEvCmD,UAFuC,EAGvClD,MAHuC,EAIvCuE,cAJuC;AAMvC,MAAIxE,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkB,UAAC4D,CAAD;AAAA,WAAOA,CAAC,CAACpB,IAAF,KAAW,MAAlB;AAAA,GAAlB,CAAJ,EAAiD;AAChDQ,IAAAA,UAAU,CAACsB,aAAX,CAAyB,UAAC1F,MAAD;AACxBA,MAAAA,MAAM,CAACE,OAAP;AACAH,MAAAA,UAAU,CAACC,MAAD,EAAS,CAClB,kCADkB,uDAGlB,mCAHkB,EAIlB,4EAJkB,oFAMlB,8HANkB,CAAT,CAAV;AAQA,KAVD;AAWA;;AAED,MAAIkB,MAAM,CAACvB,YAAP,IAAuBsB,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkB,UAAC4D,CAAD;AAAA,WAAOA,CAAC,CAACpB,IAAF,KAAW,SAAlB;AAAA,GAAlB,CAA3B,EAA2E;AAC1EQ,IAAAA,UAAU,CAACsB,aAAX,CAAyB,UAAC1F,MAAD;AACxBA,MAAAA,MAAM,CAACE,OAAP;AACAH,MAAAA,UAAU,CAACC,MAAD,EAAS,CAClB,qCADkB,EAElB,GAFkB,EAGlB,sBAHkB,EAIlB,iBAJkB,EAKlB,iBALkB,EAMlB,sBANkB,EAOlB,SAPkB,EAQlB,gCARkB,EASlB,qBATkB,EAUlB,mBAVkB,EAWlB,KAXkB,EAYlB,IAZkB,EAalB,4CAbkB,CAAT,CAAV;AAeA,KAjBD;AAkBA;AACD,CAxCM;AA0CA,IAAM2F,sBAAsB,GAAG,SAAzBA,sBAAyB,CACrC1E,KADqC,EAErCuC,KAFqC,EAGrCY,UAHqC,EAIrClD,MAJqC,EAKrCuE,cALqC;AAOrC,wBAAsBlF,aAAa,CAACW,MAAD,CAAnC;AAAA,MAAQL,SAAR,mBAAQA,SAAR;;AAEAuD,EAAAA,UAAU,CAACwB,oBAAX,CAAgC;AAC/BC,IAAAA,eAAe,EAAEC,+BAAuB,CAACC,KADV;AAE/BC,IAAAA,UAAU,EAAE,IAFmB;AAG/BC,IAAAA,aAAa,EAAE,uBAACjG,MAAD;AAAA,aAAYA,MAAM,CAACkG,kBAAP,EAAZ;AAAA,KAHgB;AAI/BC,IAAAA,YAAY,EAAE,CACb;AACC1F,MAAAA,IAAI,EAAEI,SAAS,CAACI,KAAK,CAACR,IAAP,CADhB;AAEC2F,MAAAA,WAFD,uBAEapG,MAFb;AAGEA,QAAAA,MAAM,CACJK,KADF,CACQ,WADR,EAEEgG,WAFF,CAEc;AACZpF,UAAAA,KAAK,CAACE,MAAN,CACEqB,MADF,CACS,UAACwC,CAAD;AAAA,mBAAOA,CAAC,CAAC1D,IAAF,KAAW,QAAlB;AAAA,WADT,EAEEnB,OAFF,CAEU,UAACkB,KAAD;AACRtB,YAAAA,UAAU,CAACC,MAAD,EAASoC,SAAS,CAACf,KAAK,CAAC4C,aAAP,CAAlB,CAAV;AACAjE,YAAAA,MAAM,CACJK,KADF,CACWgB,KAAK,CAACZ,IADjB,UAC0B8C,iBAAiB,CAAClC,KAAD,EAAQmC,KAAR,CAD3C,EAEEnD,KAFF,CAEQ,GAFR,EAGEH,OAHF;AAIA,WARF;AASA,SAZF,EAaEG,KAbF,CAaQ,GAbR;AAcA;AAjBF,KADa;AAJiB,GAAhC;AA0BA,CAnCM;AAqCA,IAAMiG,6BAA6B,GAAG,SAAhCA,6BAAgC,CAC5CrF,KAD4C,EAE5CuC,KAF4C,EAG5CY,UAH4C,EAI5ClD,MAJ4C,EAK5CuE,cAL4C;AAO5C,wBAAwClF,aAAa,CAACW,MAAD,CAArD;AAAA,MAAQL,SAAR,mBAAQA,SAAR;AAAA,MAAmBC,gBAAnB,mBAAmBA,gBAAnB;;AAEA,MAAMoE,cAAc,GAAGjE,KAAK,CAACE,MAAN,CAAaqB,MAAb,CAAoB,UAACwC,CAAD;AAAA,WAAOA,CAAC,CAAC1D,IAAF,KAAW,QAAlB;AAAA,GAApB,CAAvB;AAEA8C,EAAAA,UAAU,CAACmC,YAAX,CAAwB;AACvB9F,IAAAA,IAAI,eAAaQ,KAAK,CAACR,IADA;AAEvBuF,IAAAA,UAAU,EAAE,IAFW;AAGvB,eAAS,qBAAmBnF,SAAS,CAACI,KAAK,CAACR,IAAP,CAA5B,OAHc;AAIvB+F,IAAAA,UAAU,EAAEtB,cAAc,CAACpC,GAAf,CAAmB,UAACkC,CAAD;AAAA,aAAQ;AACtCyB,QAAAA,gBAAgB,EAAE,CAACzB,CAAC,CAACd,UADiB;AAEtCzD,QAAAA,IAAI,EAAEuE,CAAC,CAACvE,IAF8B;AAGtCmD,QAAAA,IAAI,eAAaoB,CAAC,CAACpB,IAAf,IAAsBoB,CAAC,CAAChB,MAAF,GAAW,IAAX,GAAkB,EAAxC,KAA6C,CAACgB,CAAC,CAACd,UAAH,GAAgB,SAAhB,GAA4B,EAAzE;AAHkC,OAAR;AAAA,KAAnB;AAJW,GAAxB;AAWAE,EAAAA,UAAU,CAACsB,aAAX,CAAyB,UAAC1F,MAAD;AAAA,WACxBD,UAAU,CAACC,MAAD,EAAS,CAClB,EADkB,EAElB,KAFkB,UAGZc,gBAAgB,CACrBG,KAAK,CAACR,IADe,CAHJ,uEAMlB,IANkB,EAOlB,iFAPkB,EAQlB,KARkB,CAAT,CADc;AAAA,GAAzB;AAaA2D,EAAAA,UAAU,CAACwB,oBAAX,CAAgC;AAC/BC,IAAAA,eAAe,EAAEC,+BAAuB,CAACC,KADV;AAE/BC,IAAAA,UAAU,EAAE,IAFmB;AAG/BG,IAAAA,YAAY,EAAE,CACb;AACC1F,MAAAA,IAAI,EAAEK,gBAAgB,CAACG,KAAK,CAACR,IAAP,CADvB;AAECmD,MAAAA,IAAI,2BAAyB3C,KAAK,CAACR,IAA/B,MAFL;AAGC2F,MAAAA,WAHD,uBAGapG,MAHb;AAIEA,QAAAA,MAAM,CACJK,KADF,mBACwBQ,SAAS,CAACI,KAAK,CAACR,IAAP,CADjC,eAEE4F,WAFF,CAEc;AACZnB,UAAAA,cAAc,CAAC/E,OAAf,CAAuB,UAACkB,KAAD;AACtBtB,YAAAA,UAAU,CAACC,MAAD,EAASoC,SAAS,CAACf,KAAK,CAAC4C,aAAP,CAAlB,CAAV;AAEAjE,YAAAA,MAAM,CACJK,KADF,CAEKgB,KAAK,CAACZ,IAFX,UAEoB8C,iBAAiB,CAClClC,KADkC,EAElCmC,KAFkC,EAGlC1C,gBAHkC,CAFrC,EAQET,KARF,CAQQ,GARR,EASEH,OATF;AAUA,WAbD;AAcA,SAjBF,EAkBEG,KAlBF,CAkBQ,IAlBR;AAmBA;AAvBF,KADa;AAHiB,GAAhC;AA+BA,CAlEM;AAoEA,IAAMqG,iBAAiB,GAAG,SAApBA,iBAAoB,CAChCzF,KADgC,EAEhCuC,KAFgC,EAGhCY,UAHgC,EAIhClD,MAJgC,EAKhCyF,aALgC;AAOhCxC,EAAAA,oBAAoB,CAAClD,KAAD,EAAQmD,UAAR,EAAoBlD,MAApB,EAA4ByF,aAA5B,CAApB;AACAnB,EAAAA,wBAAwB,CAACvE,KAAD,EAAQmD,UAAR,EAAoBlD,MAApB,CAAxB;AACAyE,EAAAA,sBAAsB,CAAC1E,KAAD,EAAQuC,KAAR,EAAeY,UAAf,EAA2BlD,MAA3B,CAAtB;AACA,MAAIF,iBAAiB,CAACC,KAAD,EAAQC,MAAR,CAArB,EACCoF,6BAA6B,CAACrF,KAAD,EAAQuC,KAAR,EAAeY,UAAf,EAA2BlD,MAA3B,CAA7B;AACD,CAZM;AAcA,IAAM0F,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD,EAAuBC,SAAvB;AACjCD,EAAAA,MAAM,CAAC1G,OAAP,CAAe,UAACc,KAAD;AAAA,WACd6F,SAAS,CAACC,oBAAV,CAA+B;AAC9BpC,MAAAA,eAAe,SAAO1D,KAAK,CAACR,IAAN,CAAWG,WAAX;AADQ,KAA/B,CADc;AAAA,GAAf;AAKA,CANM;;AC5NPoG,gCAAgB,CAAC;AAChBC,EAAAA,UADgB;AAEf,WAAO;AACNC,MAAAA,OAAO,EAAPA,OADM;AAENC,MAAAA,UAAU,EAAE,aAFN;AAGNC,MAAAA,aAAa,EAAE;AAHT,KAAP;AAKA,GAPe;AAQhBC,EAAAA,UARgB,sBAQLC,OARK;;;AASf,QAAMC,OAAO,GAAG,IAAIC,eAAJ,EAAhB;AAEA,QAAMX,MAAM,GAAGS,OAAO,CAACG,IAAR,CAAaC,SAAb,CAAuBb,MAAtC;AACA,QAAMrD,KAAK,sDACV8D,OAAO,CAACG,IAAR,CAAaE,MAAb,CAAoBC,SAApB,CAA8B3G,KADpB,qBACV,uBAAqCS,MAArC,CAA4C,UAACmG,IAAD,EAAOC,SAAP;;;AAC3C,0BAAYD,IAAZ,6BAAmBC,SAAS,CAACrH,IAA7B,IAAoCqH,SAApC;AACA,KAFD,EAEG,EAFH,CADU,oCAGA,EAHX;AAKA,QAAQzD,UAAR,GAAuBiD,OAAvB,CAAQjD,UAAR;AACA,QAAMC,UAAU,GAAGgD,OAAO,CAACS,SAAR,CAAkBC,MAAlB,CAA0BlE,KAA7C;AACA,QAAMmE,UAAU,GAAGX,OAAO,CAACY,eAAR,CAAwB9E,IAAxB,CAClB,UAACJ,IAAD;AAAA,aAAUA,IAAI,CAACmF,QAAL,CAAcrE,KAAd,KAAwB,kBAAlC;AAAA,KADkB,EAEhBkE,MAFgB,CAERlE,KAFX;AAIA,QAAMsE,OAAO,GAAGjJ,YAAY,CAACkJ,SAAb,CAAuBf,OAAO,CAACS,SAAR,CAAkB7G,MAAzC,CAAhB;AACA,QAAI,CAACkH,OAAO,CAACE,OAAb,EACC,MAAM,IAAIC,KAAJ,CACL,gFADK,CAAN;AAID,QAAMrH,MAAM,GAAGkH,OAAO,CAACI,IAAvB;AACA,QAAM7B,aAAa,GAAkB;AACpCsB,MAAAA,UAAU,EAAVA,UADoC;AAEpC3D,MAAAA,UAAU,EAAVA,UAFoC;AAGpCD,MAAAA,UAAU,EAAVA;AAHoC,KAArC;AAMA,QAAMyC,SAAS,GAAGS,OAAO,CAACkB,gBAAR,CACdnE,UADc,gBAEjB,EAFiB,EAGjB;AAAEoE,MAAAA,SAAS,EAAE;AAAb,KAHiB,CAAlB;AAMA9B,IAAAA,kBAAkB,CAACC,MAAD,EAASC,SAAT,CAAlB;AAEAA,IAAAA,SAAS,CAAC6B,UAAV,CAAqB;AACpBC,MAAAA,UAAU,EAAE,CADQ;AAEpBC,MAAAA,mBAAmB,EAAE,IAFD;AAGpBC,MAAAA,UAAU,EAAEC,8BAAmB,CAACC;AAHZ,KAArB;AAMAnC,IAAAA,MAAM,CAAC1G,OAAP,CAAe,UAACc,KAAD;AACd,UAAMmD,UAAU,GAAGmD,OAAO,CAACkB,gBAAR,CACfnE,UADe,SACDrD,KAAK,CAACR,IAAN,CAAWG,WAAX,EADC,UAElB,EAFkB,EAGlB;AAAE8H,QAAAA,SAAS,EAAE;AAAb,OAHkB,CAAnB;AAMAhC,MAAAA,iBAAiB,CAACzF,KAAD,EAAQuC,KAAR,EAAeY,UAAf,EAA2BlD,MAA3B,EAAmCyF,aAAnC,CAAjB;AAEAvC,MAAAA,UAAU,CAACuE,UAAX,CAAsB;AACrBC,QAAAA,UAAU,EAAE,CADS;AAErBC,QAAAA,mBAAmB,EAAE,IAFA;AAGrBC,QAAAA,UAAU,EAAEC,8BAAmB,CAACC;AAHX,OAAtB;AAKA,KAdD;AAgBA,WAAOzB,OAAO,CAAC0B,IAAR,EAAP;AACA;AAnEe,CAAD,CAAhB;;"}