{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n\tlanguages: z\n\t\t.preprocess((v) => (typeof v === 'string' ? v.split(',') : ['en']), z.array(z.string()))\n\t\t.default(['en']),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { Config } from './config'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tenums: EnumModel,\n\tconfig: Config,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tif (field.name.endsWith('Tr')) {\n\t\t\t\t\tzodType = `z.object({${config.languages\n\t\t\t\t\t\t.map((lang) => `${lang}: z.string()`)\n\t\t\t\t\t\t.join(', ')}})`\n\t\t\t\t} else {\n\t\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.enum([${enums[field.type].values.map((value) => `'${value}'`).join(', ')}])`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n\nexport interface EnumModel {\n\t[key: string]: DMMF.SchemaEnum\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport path from 'path'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { getJSDocs } from './docs'\nimport { EnumModel, getZodConstructor } from './types'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`export type JsonObject = { [Key in string]?: JsonValue }`,\n\t\t\t\t'export type JsonArray = Array<JsonValue>',\n\t\t\t\t'export type JsonValue = string | number | boolean | JsonObject | JsonArray | null',\n\t\t\t\t`export const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()])`,\n\t\t\t\t'export const jsonSchema: z.ZodSchema<JsonValue> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\t\tenums,\n\t\t\t\t\t\t\t\t\t\t\t\tconfig\n\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\tenums,\n\t\t\t\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tenums: EnumModel,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, enums, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, enums, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { Project } from 'ts-morph'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { generateBarrelFile, populateModelFile } from './generator'\nimport { EnumModel } from './types'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\t\tconst enums: EnumModel =\n\t\t\toptions.dmmf.schema.enumTypes.model?.reduce((prev, enumModel) => {\n\t\t\t\treturn { ...prev, [enumModel.name]: enumModel }\n\t\t\t}, {}) ?? {}\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, enums, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","languages","preprocess","v","split","array","writeArray","writer","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","enums","getRelatedModelName","zodType","extraModifiers","type","endsWith","lang","join","values","value","isList","documentation","isRequired","writeImportsForModel","sourceFile","schemaPath","outputPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","relationFields","filteredFields","Array","from","Set","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","schema","enumTypes","prev","enumModel","generator","output","clientPath","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":";;;;;;;;;;;;;;;AAEA,MAAMA,aAAa,gBAAGC,KAAC,CAACC,IAAF,CAAO,CAAC,MAAD,EAAS,OAAT,CAAP,EAA0BC,SAA1B,CAAqCC,GAAD,IAASC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA7C,CAAtB;AAEO,MAAMG,YAAY,gBAAGN,KAAC,CAACO,MAAF,CAAS;AACpCC,EAAAA,aAAa,eAAET,aAAa,CAACU,OAAd,CAAsB,MAAtB,EAA8BC,EAA9B,eAAiCV,KAAC,CAACW,OAAF,CAAU,SAAV,CAAjC,CADqB;AAEpCC,EAAAA,WAAW,eAAEZ,KAAC,CAACa,MAAF,GAAWJ,OAAX,CAAmB,OAAnB,CAFuB;AAGpCK,EAAAA,SAAS,eAAEd,KAAC,CAACC,IAAF,CAAO,CAAC,YAAD,EAAe,WAAf,CAAP,EAAoCQ,OAApC,CAA4C,YAA5C,CAHyB;AAIpCM,EAAAA,YAAY,eAAEhB,aAAa,CAACU,OAAd,CAAsB,OAAtB,CAJsB;AAKpCO,EAAAA,OAAO,eAAEhB,KAAC,CAACa,MAAF,GAAWI,QAAX,EAL2B;AAMpCC,EAAAA,qBAAqB,eAAEnB,aAAa,CAACU,OAAd,CAAsB,MAAtB,CANa;AAOpCU,EAAAA,SAAS,eAAEnB,KAAC,CACVoB,UADS,CACGC,CAAD,IAAQ,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAC,CAACC,KAAF,CAAQ,GAAR,CAAxB,GAAuC,CAAC,IAAD,CADjD,EAC0DtB,KAAC,CAACuB,KAAF,CAAQvB,KAAC,CAACa,MAAF,EAAR,CAD1D,EAETJ,OAFS,CAED,CAAC,IAAD,CAFC;AAPyB,CAAT,CAArB;;ACAA,MAAMe,UAAU,GAAG,CAACC,MAAD,EAA0BF,KAA1B,EAA2CG,OAAO,GAAG,IAArD,KACzBH,KAAK,CAACI,OAAN,CAAeC,IAAD,IAAUH,MAAM,CAACI,KAAP,CAAaD,IAAb,EAAmBE,kBAAnB,CAAsCJ,OAAtC,CAAxB,CADM;AAGA,MAAMK,aAAa,GAAG,CAAC;AAAEjB,EAAAA,SAAF;AAAaF,EAAAA,WAAb;AAA0BJ,EAAAA;AAA1B,CAAD;AAC5B,QAAMwB,eAAe,GAAG,CAACC,IAAD,EAAeC,MAAM,GAAG,EAAxB;AACvB,QAAIpB,SAAS,KAAK,WAAlB,EAA+B;AAC9BmB,MAAAA,IAAI,GAAGA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,WAAjB,KAAiCH,IAAI,CAACE,KAAL,CAAW,CAAX,CAAxC;AACA;;AACD,cAAUD,SAASD,OAAOrB,aAA1B;AACA,GALD;;AAOA,SAAO;AACNyB,IAAAA,SAAS,EAAGJ,IAAD,IAAkBD,eAAe,CAACC,IAAD,EAAOzB,aAAa,KAAK,SAAlB,GAA8B,GAA9B,GAAoC,EAA3C,CADtC;AAEN8B,IAAAA,gBAAgB,EAAGL,IAAD,IACjBD,eAAe,CACdxB,aAAa,KAAK,SAAlB,GAA8ByB,IAAI,CAACM,QAAL,EAA9B,aAA0DN,IAAI,CAACM,QAAL,IAD5C;AAHV,GAAP;AAOA,CAfM;AAiBA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAoBC,MAApB,KAChCD,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAmBC,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAe,QAA5C,KAAyDJ,MAAM,CAAClC,aAAP,KAAyB,KAD5E;AAGA,MAAMuC,KAAK,GAAG,CAAkBC,KAAlB,EAA4BC,IAA5B;AACpB,SAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AACnB,WAAOA,GAAG,GAAGJ,IAAN,KAAe,CAAf,GACJ,CAAC,GAAGE,GAAJ,EAAS,CAACC,IAAD,CAAT,CADI,GAEJ,CAAC,GAAGD,GAAG,CAAChB,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAJ,EAAsB,CAAC,GAAGgB,GAAG,CAAChB,KAAJ,CAAU,CAAC,CAAX,EAAc,CAAd,CAAJ,EAAsBiB,IAAtB,CAAtB,CAFH;AAGA,GAJM,EAIJ,EAJI,CAAP;AAKA,CANM;AAQA,MAAME,QAAQ,GAAIN,KAAD;AACvB,QAAMO,SAAS,GAAGP,KAAK,CACrBQ,OADgB,CACR,WADQ,EACK,EADL,EAEhBA,OAFgB,CAER,KAFQ,EAED,GAFC,EAGhBA,OAHgB,CAGR,QAHQ,EAGE,GAHF,CAAlB;AAKA,MAAID,SAAS,CAACE,QAAV,iBAAA,CAAJ,EAA0C,OAAOF,SAAS,CAACjC,KAAV,iBAAA,EAAkCa,KAAlC,CAAwC,CAAC,CAAzC,EAA4C,CAA5C,CAAP;AAE1C,MAAIoB,SAAS,CAACG,UAAV,MAAA,CAAJ,EAAiC,OAAOH,SAAP;AAEjC,SAAO,OAAOA,SAAd;AACA,CAXM;;AChCA,MAAMI,SAAS,GAAIC,SAAD;AACxB,QAAMC,KAAK,GAAa,EAAxB;;AAEA,MAAID,SAAJ,EAAe;AACd,UAAME,QAAQ,GAAGF,SAAS,CAACtC,KAAV,CAAgB,IAAhB,EAAsByC,MAAtB,CAA8BC,EAAD,IAAQ,CAACA,EAAE,CAACC,SAAH,GAAeP,UAAf,CAA0B,MAA1B,CAAtC,CAAjB;;AAEA,QAAII,QAAQ,CAACI,MAAb,EAAqB;AACpBL,MAAAA,KAAK,CAACM,IAAN,CAAW,KAAX;AACAL,MAAAA,QAAQ,CAACnC,OAAT,CAAkBqC,EAAD,IAAQH,KAAK,CAACM,IAAN,OAAiBH,IAAjB,CAAzB;AACAH,MAAAA,KAAK,CAACM,IAAN,CAAW,KAAX;AACA;AACD;;AAED,SAAON,KAAP;AACA,CAdM;AAgBA,MAAMO,iBAAiB,GAAIR,SAAD,IAChCA,SAAS,CACPtC,KADF,CACQ,IADR,EAEEyC,MAFF,CAEUnC,IAAD,IAAUA,IAAI,CAACqC,SAAL,GAAiBP,UAAjB,CAA4B,MAA5B,CAFnB,EAGEW,GAHF,CAGOzC,IAAD,IAAUA,IAAI,CAACqC,SAAL,GAAiB9B,KAAjB,CAAuB,CAAvB,CAHhB,EAIEmC,OAJF,CAIW1C,IAAD;AAERmB,KAAK,CAAC1C,iBAAK,CAACuB,IAAD,CAAN,EAAc,CAAd,CAAL,CACEO,KADF,CACQ,CADR,EACW,CAAC,CADZ,EAEEkC,GAFF,CAGE,CAAC,CAACE,IAAD,EAAOC,QAAP,CAAD,KACED,IAAe,CAACf,OAAhB,CAAwB,OAAxB,EAAiC,EAAjC,OACEiB,qBAAS,CAACD,QAAD,IALf,CANF,CADM;AAgBA,MAAME,mBAAmB,GAAId,SAAD;;;AAClC,kCAAOQ,iBAAiB,CAACR,SAAD,CAAjB,CACLe,IADK,CACCC,QAAD,IAAcA,QAAQ,CAAClB,UAAT,CAAoB,SAApB,CADd,CAAP,qBAAO,sBAEJvB,KAFI,CAEE,CAFF,EAGLA,KAHK,CAGC,CAHD,EAGI,CAAC,CAHL,CAAP;AAIA,CALM;AAOA,MAAM0C,gBAAgB,GAAIjB,SAAD;AAC/B,SAAOQ,iBAAiB,CAACR,SAAD,CAAjB,CAA6BG,MAA7B,CAAqCQ,IAAD,IAAU,CAACA,IAAI,CAACb,UAAL,CAAgB,SAAhB,CAA/C,CAAP;AACA,CAFM;;ACtCA,MAAMoB,iBAAiB,GAAG,CAChCjC,KADgC,EAEhCkC,KAFgC,EAGhCrC,MAHgC,EAIhCsC,sBAAuB/C,IAAD,IACrBA,IAAI,CAACM,QAAL,EAL+B;AAOhC,MAAI0C,OAAO,GAAG,aAAd;AACA,MAAIC,cAAc,GAAa,CAAC,EAAD,CAA/B;;AACA,MAAIrC,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AAC5B,YAAQD,KAAK,CAACsC,IAAd;AACC,WAAK,QAAL;AACCF,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,KAAL;AACCA,QAAAA,OAAO,GAAG,YAAV;AACAC,QAAAA,cAAc,CAACf,IAAf,CAAoB,OAApB;AACA;;AACD,WAAK,QAAL;AACCc,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,UAAL;AACCA,QAAAA,OAAO,GAAG,UAAV;AACA;;AACD,WAAK,OAAL;AACCA,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,SAAL;AACCA,QAAAA,OAAO,GAAG,YAAV;AACA;;AACD,WAAK,MAAL;AACC,YAAIpC,KAAK,CAACZ,IAAN,CAAWmD,QAAX,CAAoB,IAApB,CAAJ,EAA+B;AAC9BH,UAAAA,OAAO,gBAAgBvC,MAAM,CAACvB,SAAP,CACrBkD,GADqB,CAChBgB,IAAD,OAAaA,kBADI,EAErBC,IAFqB,CAEhB,IAFgB,KAAvB;AAGA,SAJD,MAIO;AACNL,UAAAA,OAAO,GAAG,YAAV;AACA;;AACD;;AACD,WAAK,SAAL;AACCA,QAAAA,OAAO,GAAG,aAAV;AACA;AACD;;AACA,WAAK,OAAL;AACCA,QAAAA,OAAO,GAAG,aAAV;AACA;AAnCF;AAqCA,GAtCD,MAsCO,IAAIpC,KAAK,CAACC,IAAN,KAAe,MAAnB,EAA2B;AACjCmC,IAAAA,OAAO,cAAcF,KAAK,CAAClC,KAAK,CAACsC,IAAP,CAAL,CAAkBI,MAAlB,CAAyBlB,GAAzB,CAA8BmB,KAAD,QAAeA,QAA5C,EAAsDF,IAAtD,CAA2D,IAA3D,KAArB;AACA,GAFM,MAEA,IAAIzC,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AACnCmC,IAAAA,OAAO,GAAGD,mBAAmB,CAACnC,KAAK,CAACsC,IAAP,CAA7B;AACA;;AAED,MAAItC,KAAK,CAAC4C,MAAV,EAAkBP,cAAc,CAACf,IAAf,CAAoB,SAApB;;AAClB,MAAItB,KAAK,CAAC6C,aAAV,EAAyB;AAAA;;AACxBT,IAAAA,OAAO,2BAAGP,mBAAmB,CAAC7B,KAAK,CAAC6C,aAAP,CAAtB,mCAA+CT,OAAtD;AACAC,IAAAA,cAAc,CAACf,IAAf,CAAoB,GAAGU,gBAAgB,CAAChC,KAAK,CAAC6C,aAAP,CAAvC;AACA;;AACD,MAAI,CAAC7C,KAAK,CAAC8C,UAAP,IAAqB9C,KAAK,CAACsC,IAAN,KAAe,MAAxC,EAAgDD,cAAc,CAACf,IAAf,CAAoB,WAApB;;AAGhD,YAAUc,UAAUC,cAAc,CAACI,IAAf,CAAoB,GAApB,GAApB;AACA,CA9DM;;ACSA,MAAMM,oBAAoB,GAAG,CACnCnD,KADmC,EAEnCoD,UAFmC,EAGnCnD,MAHmC,EAInC;AAAEoD,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAJmC;AAMnC,QAAM;AAAEzD,IAAAA;AAAF,MAAuBP,aAAa,CAACW,MAAD,CAA1C;AACA,QAAMsD,UAAU,GAAiC,CAChD;AACClD,IAAAA,IAAI,EAAEmD,qBAAa,CAACC,iBADrB;AAECC,IAAAA,eAAe,EAAE,GAFlB;AAGCC,IAAAA,eAAe,EAAE;AAHlB,GADgD,CAAjD;;AAQA,MAAI1D,MAAM,CAAC1B,OAAX,EAAoB;AACnBgF,IAAAA,UAAU,CAAC7B,IAAX,CAAgB;AACfrB,MAAAA,IAAI,EAAEmD,qBAAa,CAACC,iBADL;AAEfC,MAAAA,eAAe,EAAE,SAFF;AAGfC,MAAAA,eAAe,EAAE9C,QAAQ,CACxB+C,wBAAI,CAACC,QAAL,CAAcP,UAAd,EAA0BM,wBAAI,CAACE,OAAL,CAAaF,wBAAI,CAACG,OAAL,CAAaV,UAAb,CAAb,EAAuCpD,MAAM,CAAC1B,OAA9C,CAA1B,CADwB;AAHV,KAAhB;AAOA;;AAED,MAAI0B,MAAM,CAAC3B,YAAP,IAAuB0B,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAmB6D,CAAD,IAAOA,CAAC,CAACtB,IAAF,KAAW,SAApC,CAA3B,EAA2E;AAC1Ea,IAAAA,UAAU,CAAC7B,IAAX,CAAgB;AACfrB,MAAAA,IAAI,EAAEmD,qBAAa,CAACC,iBADL;AAEfQ,MAAAA,YAAY,EAAE,CAAC,SAAD,CAFC;AAGfN,MAAAA,eAAe,EAAE;AAHF,KAAhB;AAKA;;AACD,QAAMO,cAAc,GAAGlE,KAAK,CAACE,MAAN,CAAaoB,MAAb,CAAqB0C,CAAD,IAAOA,CAAC,CAAC3D,IAAF,KAAW,QAAtC,CAAvB;;AAEA,MAAIJ,MAAM,CAAClC,aAAP,KAAyB,KAAzB,IAAkCmG,cAAc,CAACzC,MAAf,GAAwB,CAA9D,EAAiE;AAChE,UAAM0C,cAAc,GAAGD,cAAc,CAAC5C,MAAf,CAAuB0C,CAAD,IAAOA,CAAC,CAACtB,IAAF,KAAW1C,KAAK,CAACR,IAA9C,CAAvB;;AAEA,QAAI2E,cAAc,CAAC1C,MAAf,GAAwB,CAA5B,EAA+B;AAC9B8B,MAAAA,UAAU,CAAC7B,IAAX,CAAgB;AACfrB,QAAAA,IAAI,EAAEmD,qBAAa,CAACC,iBADL;AAEfE,QAAAA,eAAe,EAAE,SAFF;AAGfM,QAAAA,YAAY,EAAEG,KAAK,CAACC,IAAN,CACb,IAAIC,GAAJ,CACCH,cAAc,CAACtC,OAAf,CAAwBmC,CAAD,IAAO,YAClBA,CAAC,CAACtB,MADgB,EAE7B7C,gBAAgB,CAACmE,CAAC,CAACtB,IAAH,CAFa,CAA9B,CADD,CADa;AAHC,OAAhB;AAYA;AACD;;AAEDU,EAAAA,UAAU,CAACmB,qBAAX,CAAiChB,UAAjC;AACA,CAtDM;AAwDA,MAAMiB,wBAAwB,GAAG,CACvCxE,KADuC,EAEvCoD,UAFuC,EAGvCnD,MAHuC,EAIvCwE,cAJuC;AAMvC,MAAIzE,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAmB6D,CAAD,IAAOA,CAAC,CAACtB,IAAF,KAAW,MAApC,CAAJ,EAAiD;AAChDU,IAAAA,UAAU,CAACsB,aAAX,CAA0B1F,MAAD;AACxBA,MAAAA,MAAM,CAACC,OAAP;AACAF,MAAAA,UAAU,CAACC,MAAD,EAAS,CAClB,kCADkB,4DAAA,EAGlB,0CAHkB,EAIlB,mFAJkB,yFAAA,EAMlB,qIANkB,CAAT,CAAV;AAQA,KAVD;AAWA;;AAED,MAAIiB,MAAM,CAAC3B,YAAP,IAAuB0B,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAmB6D,CAAD,IAAOA,CAAC,CAACtB,IAAF,KAAW,SAApC,CAA3B,EAA2E;AAC1EU,IAAAA,UAAU,CAACsB,aAAX,CAA0B1F,MAAD;AACxBA,MAAAA,MAAM,CAACC,OAAP;AACAF,MAAAA,UAAU,CAACC,MAAD,EAAS,CAClB,qCADkB,EAElB,GAFkB,EAGlB,sBAHkB,EAIlB,iBAJkB,EAKlB,iBALkB,EAMlB,sBANkB,EAOlB,SAPkB,EAQlB,gCARkB,EASlB,qBATkB,EAUlB,mBAVkB,EAWlB,KAXkB,EAYlB,IAZkB,EAalB,4CAbkB,CAAT,CAAV;AAeA,KAjBD;AAkBA;AACD,CAxCM;AA0CA,MAAM2F,sBAAsB,GAAG,CACrC3E,KADqC,EAErCsC,KAFqC,EAGrCc,UAHqC,EAIrCnD,MAJqC,EAKrCwE,cALqC;AAOrC,QAAM;AAAE7E,IAAAA;AAAF,MAAgBN,aAAa,CAACW,MAAD,CAAnC;AAEAmD,EAAAA,UAAU,CAACwB,oBAAX,CAAgC;AAC/BC,IAAAA,eAAe,EAAEC,+BAAuB,CAACC,KADV;AAE/BC,IAAAA,UAAU,EAAE,IAFmB;AAG/BC,IAAAA,aAAa,EAAGjG,MAAD,IAAYA,MAAM,CAACkG,kBAAP,EAHI;AAI/BC,IAAAA,YAAY,EAAE,CACb;AACC3F,MAAAA,IAAI,EAAEI,SAAS,CAACI,KAAK,CAACR,IAAP,CADhB;;AAEC4F,MAAAA,WAAW,CAACpG,MAAD;AACVA,QAAAA,MAAM,CACJI,KADF,CACQ,WADR,EAEEiG,WAFF,CAEc;AACZrF,UAAAA,KAAK,CAACE,MAAN,CACEoB,MADF,CACU0C,CAAD,IAAOA,CAAC,CAAC3D,IAAF,KAAW,QAD3B,EAEEnB,OAFF,CAEWkB,KAAD;AACRrB,YAAAA,UAAU,CAACC,MAAD,EAASkC,SAAS,CAACd,KAAK,CAAC6C,aAAP,CAAlB,CAAV;AACAjE,YAAAA,MAAM,CACJI,KADF,IAEKgB,KAAK,CAACZ,SAAS6C,iBAAiB,CAClCjC,KADkC,EAElCkC,KAFkC,EAGlCrC,MAHkC,GAFrC,EAQEb,KARF,CAQQ,GARR,EASEH,OATF;AAUA,WAdF;AAeA,SAlBF,EAmBEG,KAnBF,CAmBQ,GAnBR;AAoBA;;AAvBF,KADa;AAJiB,GAAhC;AAgCA,CAzCM;AA2CA,MAAMkG,6BAA6B,GAAG,CAC5CtF,KAD4C,EAE5CsC,KAF4C,EAG5Cc,UAH4C,EAI5CnD,MAJ4C,EAK5CwE,cAL4C;AAO5C,QAAM;AAAE7E,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAkCP,aAAa,CAACW,MAAD,CAArD;AAEA,QAAMiE,cAAc,GAAGlE,KAAK,CAACE,MAAN,CAAaoB,MAAb,CAAqB0C,CAAD,IAAOA,CAAC,CAAC3D,IAAF,KAAW,QAAtC,CAAvB;AAEA+C,EAAAA,UAAU,CAACmC,YAAX,CAAwB;AACvB/F,IAAAA,IAAI,aAAaQ,KAAK,CAACR,MADA;AAEvBwF,IAAAA,UAAU,EAAE,IAFW;AAGvBQ,IAAAA,OAAO,EAAE,mBAAmB5F,SAAS,CAACI,KAAK,CAACR,IAAP,IAA5B,CAHc;AAIvBiG,IAAAA,UAAU,EAAEvB,cAAc,CAACtC,GAAf,CAAoBoC,CAAD,KAAQ;AACtC0B,MAAAA,gBAAgB,EAAE,CAAC1B,CAAC,CAACd,UADiB;AAEtC1D,MAAAA,IAAI,EAAEwE,CAAC,CAACxE,IAF8B;AAGtCkD,MAAAA,IAAI,aAAasB,CAAC,CAACtB,OAAOsB,CAAC,CAAChB,MAAF,GAAW,IAAX,GAAkB,KAAK,CAACgB,CAAC,CAACd,UAAH,GAAgB,SAAhB,GAA4B;AAHvC,KAAR,CAAnB;AAJW,GAAxB;AAWAE,EAAAA,UAAU,CAACsB,aAAX,CAA0B1F,MAAD,IACxBD,UAAU,CAACC,MAAD,EAAS,CAClB,EADkB,EAElB,KAFkB,QAGZa,gBAAgB,CACrBG,KAAK,CAACR,IADe,mEAHJ,EAMlB,IANkB,EAOlB,iFAPkB,EAQlB,KARkB,CAAT,CADX;AAaA4D,EAAAA,UAAU,CAACwB,oBAAX,CAAgC;AAC/BC,IAAAA,eAAe,EAAEC,+BAAuB,CAACC,KADV;AAE/BC,IAAAA,UAAU,EAAE,IAFmB;AAG/BG,IAAAA,YAAY,EAAE,CACb;AACC3F,MAAAA,IAAI,EAAEK,gBAAgB,CAACG,KAAK,CAACR,IAAP,CADvB;AAECkD,MAAAA,IAAI,yBAAyB1C,KAAK,CAACR,OAFpC;;AAGC4F,MAAAA,WAAW,CAACpG,MAAD;AACVA,QAAAA,MAAM,CACJI,KADF,iBACwBQ,SAAS,CAACI,KAAK,CAACR,IAAP,WADjC,EAEE6F,WAFF,CAEc;AACZnB,UAAAA,cAAc,CAAChF,OAAf,CAAwBkB,KAAD;AACtBrB,YAAAA,UAAU,CAACC,MAAD,EAASkC,SAAS,CAACd,KAAK,CAAC6C,aAAP,CAAlB,CAAV;AAEAjE,YAAAA,MAAM,CACJI,KADF,IAEKgB,KAAK,CAACZ,SAAS6C,iBAAiB,CAClCjC,KADkC,EAElCkC,KAFkC,EAGlCrC,MAHkC,EAIlCJ,gBAJkC,GAFrC,EASET,KATF,CASQ,GATR,EAUEH,OAVF;AAWA,WAdD;AAeA,SAlBF,EAmBEG,KAnBF,CAmBQ,IAnBR;AAoBA;;AAxBF,KADa;AAHiB,GAAhC;AAgCA,CAnEM;AAqEA,MAAMuG,iBAAiB,GAAG,CAChC3F,KADgC,EAEhCsC,KAFgC,EAGhCc,UAHgC,EAIhCnD,MAJgC,EAKhC2F,aALgC;AAOhCzC,EAAAA,oBAAoB,CAACnD,KAAD,EAAQoD,UAAR,EAAoBnD,MAApB,EAA4B2F,aAA5B,CAApB;AACApB,EAAAA,wBAAwB,CAACxE,KAAD,EAAQoD,UAAR,EAAoBnD,MAApB,CAAxB;AACA0E,EAAAA,sBAAsB,CAAC3E,KAAD,EAAQsC,KAAR,EAAec,UAAf,EAA2BnD,MAA3B,CAAtB;AACA,MAAIF,iBAAiB,CAACC,KAAD,EAAQC,MAAR,CAArB,EACCqF,6BAA6B,CAACtF,KAAD,EAAQsC,KAAR,EAAec,UAAf,EAA2BnD,MAA3B,CAA7B;AACD,CAZM;AAcA,MAAM4F,kBAAkB,GAAG,CAACC,MAAD,EAAuBC,SAAvB;AACjCD,EAAAA,MAAM,CAAC5G,OAAP,CAAgBc,KAAD,IACd+F,SAAS,CAACC,oBAAV,CAA+B;AAC9BrC,IAAAA,eAAe,OAAO3D,KAAK,CAACR,IAAN,CAAWG,WAAX;AADQ,GAA/B,CADD;AAKA,CANM;;AC7OP;AAUAsG,gCAAgB,CAAC;AAChBC,EAAAA,UAAU;AACT,WAAO;AACNC,MAAAA,OADM;AAENC,MAAAA,UAAU,EAAE,aAFN;AAGNC,MAAAA,aAAa,EAAE;AAHT,KAAP;AAKA,GAPe;;AAQhBC,EAAAA,UAAU,CAACC,OAAD;;;AACT,UAAMC,OAAO,GAAG,IAAIC,eAAJ,EAAhB;AAEA,UAAMX,MAAM,GAAGS,OAAO,CAACG,IAAR,CAAaC,SAAb,CAAuBb,MAAtC;AACA,UAAMxD,KAAK,sDACViE,OAAO,CAACG,IAAR,CAAaE,MAAb,CAAoBC,SAApB,CAA8B7G,KADpB,qBACV,uBAAqCS,MAArC,CAA4C,CAACqG,IAAD,EAAOC,SAAP;AAC3C,aAAO,EAAE,GAAGD,IAAL;AAAW,SAACC,SAAS,CAACvH,IAAX,GAAkBuH;AAA7B,OAAP;AACA,KAFD,EAEG,EAFH,CADU,oCAGA,EAHX;AAKA,UAAM;AAAE1D,MAAAA;AAAF,QAAiBkD,OAAvB;AACA,UAAMjD,UAAU,GAAGiD,OAAO,CAACS,SAAR,CAAkBC,MAAlB,CAA0BlE,KAA7C;AACA,UAAMmE,UAAU,GAAGX,OAAO,CAACY,eAAR,CAAwBjF,IAAxB,CACjBJ,IAAD,IAAUA,IAAI,CAACsF,QAAL,CAAcrE,KAAd,KAAwB,kBADhB,EAEhBkE,MAFgB,CAERlE,KAFX;AAIA,UAAMsE,OAAO,GAAGxJ,YAAY,CAACyJ,SAAb,CAAuBf,OAAO,CAACS,SAAR,CAAkB/G,MAAzC,CAAhB;AACA,QAAI,CAACoH,OAAO,CAACE,OAAb,EACC,MAAM,IAAIC,KAAJ,CACL,gFADK,CAAN;AAID,UAAMvH,MAAM,GAAGoH,OAAO,CAACI,IAAvB;AACA,UAAM7B,aAAa,GAAkB;AACpCsB,MAAAA,UADoC;AAEpC5D,MAAAA,UAFoC;AAGpCD,MAAAA;AAHoC,KAArC;AAMA,UAAM0C,SAAS,GAAGS,OAAO,CAACkB,gBAAR,IACdpE,qBADc,EAEjB,EAFiB,EAGjB;AAAEqE,MAAAA,SAAS,EAAE;AAAb,KAHiB,CAAlB;AAMA9B,IAAAA,kBAAkB,CAACC,MAAD,EAASC,SAAT,CAAlB;AAEAA,IAAAA,SAAS,CAAC6B,UAAV,CAAqB;AACpBC,MAAAA,UAAU,EAAE,CADQ;AAEpBC,MAAAA,mBAAmB,EAAE,IAFD;AAGpBC,MAAAA,UAAU,EAAEC,8BAAmB,CAACC;AAHZ,KAArB;AAMAnC,IAAAA,MAAM,CAAC5G,OAAP,CAAgBc,KAAD;AACd,YAAMoD,UAAU,GAAGoD,OAAO,CAACkB,gBAAR,IACfpE,cAActD,KAAK,CAACR,IAAN,CAAWG,WAAX,OADC,EAElB,EAFkB,EAGlB;AAAEgI,QAAAA,SAAS,EAAE;AAAb,OAHkB,CAAnB;AAMAhC,MAAAA,iBAAiB,CAAC3F,KAAD,EAAQsC,KAAR,EAAec,UAAf,EAA2BnD,MAA3B,EAAmC2F,aAAnC,CAAjB;AAEAxC,MAAAA,UAAU,CAACwE,UAAX,CAAsB;AACrBC,QAAAA,UAAU,EAAE,CADS;AAErBC,QAAAA,mBAAmB,EAAE,IAFA;AAGrBC,QAAAA,UAAU,EAAEC,8BAAmB,CAACC;AAHX,OAAtB;AAKA,KAdD;AAgBA,WAAOzB,OAAO,CAAC0B,IAAR,EAAP;AACA;;AAnEe,CAAD,CAAhB;;"}